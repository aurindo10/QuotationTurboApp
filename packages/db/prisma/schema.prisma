// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["jsonProtocol"]
// }

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// }
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model LinkOrders {
  id  String @id @default(cuid())
  whoIsAsking String
  aproved Boolean? @default(false)
  createdAt DateTime? @default(now())
  clerkIdOrg String?
}
model Product {
  id  String @id @default(cuid())
  nome String
  descricao String
  brand String
  unit String
  whoCreated String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  ProdutosDaCotacao ProdutosDaCotacao[]
  code String?
  clerkIdOrg String?
}

model Cotacoes {
  id String @id @default(cuid())
  createdAt DateTime? @default(now())
  nome  String
  updatedAt DateTime? @updatedAt
  whoCreated String
  produtos ProdutosDaCotacao[]
  ammountOfTradeRepresentative Float?
  Representante Representante[]
  ProdutoCotado ProdutoCotado[]
  BuyList BuyList[]
  clerkIdOrg String?
}
model ProdutosDaCotacao {
  id String @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  cotacaoId String
  cotacao Cotacoes @relation(fields: [cotacaoId], references: [id], onDelete: Cascade)
  produtoId String
  produto Product @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  whoCreated String
  quantidade Float?
  code String?
  produtoCotado ProdutoCotado[]
  clerkIdOrg String?
}
model Representante {
  id String @id @default(cuid())
  nome String
  createdAt DateTime? @default(now())
  cotacaoId String
  cotacao Cotacoes @relation(fields: [cotacaoId], references: [id], onDelete: Cascade )
  produtoCotado ProdutoCotado[]
  buyList BuyList[]
  clerkIdOrg String?
  empresaName  String?
}

model ProdutoCotado {
  id  String @id @default(cuid())
  createdAt DateTime? @default(now())
  cotacaoId String
  cotacao Cotacoes @relation(fields: [cotacaoId], references: [id], onDelete: Cascade)
  representanteId String
  representante Representante @relation(fields: [representanteId], references: [id], onDelete: Cascade)
  valor Float?
  produtoDaCotacaoId String
  produtoDaCotacao ProdutosDaCotacao @relation(fields: [produtoDaCotacaoId], references: [id], onDelete: Cascade)
  quantidadeMinima Float?
  code String?
  buyList BuyList[]
  clerkIdOrg String?
}

model BuyList {
  id String @id @default(cuid())
  createdAt DateTime? @default(now())
  produtoCotadoId String
  produtoCotado ProdutoCotado @relation(fields: [produtoCotadoId], references: [id], onDelete: Cascade)
  cotacaoId String?
  cotacao Cotacoes? @relation(fields: [cotacaoId], references: [id], onDelete: Cascade)
  representanteId String?
  representante Representante? @relation(fields: [representanteId], references: [id], onDelete: Cascade)
  clerkIdOrg String?
}